# Common includes for making SpiNNaker binaries

ifndef GNU
    GNU := 1
endif
ifndef LIB
    LIB := 0
endif

# If SPINN_DIRS is not defined, this is an error!
ifndef SPINN_DIRS
    $(error SPINN_DIRS is not set.  Please define SPINN_DIRS (possibly by running "source setup" in the spinnaker tools folder))
endif
SPINN_LIB_DIR = $(SPINN_DIRS)/lib
SPINN_INC_DIR = $(SPINN_DIRS)/include
SPINN_TOOLS_DIR = $(SPINN_DIRS)/tools
SPINN_MAKE_LIB_DIR = $(SPINN_DIRS)/make_lib

# ------------------------------------------------------------------------------
# Tools

ifeq ($(GNU),1)

    # GNU Compiler (gcc) settings
    GP := arm-none-eabi
    AS := $(GP)-as --defsym GNU=1 -mthumb-interwork -march=armv5te
    
    ifeq ($(LIB), 1)
        CC := $(GP)-gcc -c -Os -mthumb-interwork -march=armv5te -std=gnu99 -I $(SPINN_INC_DIR)
        CFLAGS += -fdata-sections -ffunction-sections
        LD := $(GP)-ld -i
    else
        CC := $(GP)-gcc -mthumb-interwork -march=armv5te -std=gnu99 -I $(SPINN_INC_DIR) -c
        LD := $(GP)-gcc -T$(SPINN_TOOLS_DIR)/sark.lnk -Wl,-e,cpu_reset -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,--use-blx -nostartfiles -static
        LFLAGS += -L $(SPINN_LIB_DIR)
    endif
    
    CC_THUMB := $(CC) -mthumb -DTHUMB
    AR := $(GP)-ar -rcs
    OC := $(GP)-objcopy
    OD := $(GP)-objdump -dxt
    NM := $(GP)-nm
    SPINN_LIBS += $(SPINN_LIB_DIR)/libspin1_api.a

else
    # ARM Compiler settings
    AS := armasm --keep --cpu=5te --apcs /interwork
    CC := armcc -c --c99 --cpu=5te -Ospace --apcs /interwork --min_array_alignment=4 -I $(SPINN_INC_DIR)
    CC_THUMB := $(CC) --thumb -DTHUMB
    
    ifeq ($(LIB), 1)
        CFLAGS += --split_sections
        LD := armlink --partial
    else
        LD = armlink --scatter=$(SPINN_TOOLS_DIR)/sark.sct --remove --entry cpu_reset
    endif
    
    AR := armar -rsc
    OC := fromelf
    OD := fromelf -cds --output
    NM := nm
    SPINN_LIBS += $(SPINN_LIB_DIR)/spin1_api.a
endif

RM := rm -f
CAT := cat
LS := ls -l
MKDIR := mkdir -p
CP := cp

# Primary target is an APLX file - built from the ELF
#  1) Create a binary file which is the concatenation of RO and RW sections
#  2) Make an APLX header from the ELF file with "mkaplx" and concatenate
#     that with the binary to make the APLX file
#  3) Remove temporary files and "ls" the APLX file
$(APP_OUTPUT_DIR)%.aplx: $(BUILD_DIR)%.elf
ifeq ($(GNU),1)
	$(OC) -O binary -j RO_DATA $< $(BUILD_DIR)RO_DATA.bin
	$(OC) -O binary -j RW_DATA $< $(BUILD_DIR)RW_DATA.bin
	$(SPINN_TOOLS_DIR)/mkbin $(BUILD_DIR)RO_DATA.bin $(BUILD_DIR)RW_DATA.bin > $(BUILD_DIR)$*.bin
else
	$(OC) --bin --output $*.bin $<
endif
	$(SPINN_TOOLS_DIR)/mkaplx -nm $(NM) $< | $(CAT) - $(BUILD_DIR)$*.bin > $@
	$(RM) $(BUILD_DIR)$*.bin $(BUILD_DIR)RO_DATA.bin $(BUILD_DIR)RW_DATA.bin
	$(LS) $@

# Build the ELF file
#  1) Make a "sark_build.c" file containing app. name and build time
#     with "mkbuild" and compile it
#  2) Link application object(s), build file and library to make the ELF
#  3) Tidy up temporaries and create a list file
$(BUILD_DIR)%.elf: .build_directory .output_directory $(OBJECTS) $(SCRIPT) $(SPINN_LIBS) 
	$(SPINN_TOOLS_DIR)/mkbuild $* > $(BUILD_DIR)sark_build.c
	$(CC) -o $(BUILD_DIR)sark_build.o $(BUILD_DIR)sark_build.c
	$(LD) $(LFLAGS) $(OBJECTS) $(BUILD_DIR)sark_build.o $(LIBRARIES) $(SPINN_LIBS) -o $@
	$(RM) $(BUILD_DIR)sark_build.c $(BUILD_DIR)sark_build.o
	$(OD) > $(BUILD_DIR)$*.txt $@

$(BUILD_DIR)%.o: %.c
	$(CC) $(CFLAGS) -o $@ $<

.build_directory:
	$(MKDIR) $(BUILD_DIR)
	
.output_directory:
	$(MKDIR) $(APP_OUTPUT_DIR)
